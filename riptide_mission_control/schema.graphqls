# Auto-generated schema. Do not edit. Generated by schema_printer.
# As a dev you can run schema_printer to update, otherwise will be updated by CI.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type AliasCommandConfiguration {
  aliases: String!
}

type App {
  config: AppConfiguration!
}

type AppConfiguration {
  name: String!
  notices: AppConfigurationNotices
  import: [EntryAppConfigurationImport]
  services: [EntryService]
  commands: [EntryCommand]
}

type AppConfigurationImport {
  target: String!
  name: String!
}

type AppConfigurationNotices {
  usage: String
  installation: String
}

type Command {
  config: CommandConfiguration!
}

union CommandConfiguration = NormalCommandConfiguration | AliasCommandConfiguration

type EntryAppConfigurationImport {
  key: String!
  value: AppConfigurationImport!
}

type EntryCommand {
  key: String!
  value: Command!
}

type EntryNormalCommandConfigurationAdditionalVolumes {
  key: String!
  value: NormalCommandConfigurationAdditionalVolumes!
}

type EntryService {
  key: String!
  value: Service!
}

type EntryServiceConfigurationAdditionalPorts {
  key: String!
  value: ServiceConfigurationAdditionalPorts!
}

type EntryServiceConfigurationAdditionalVolumes {
  key: String!
  value: ServiceConfigurationAdditionalVolumes!
}

type EntryServiceConfigurationConfig {
  key: String!
  value: ServiceConfigurationConfig!
}

type EntryString {
  key: String!
  value: String!
}

scalar GenericScalar

scalar JSONString

type MultiProjectsLoadResult {
  errors: [ProjectLoadError]!
  projects: [Project]!
}

type Mutation {
  flushCache: Boolean
  removeProject(name: String!): Boolean
}

type NormalCommandConfiguration {
  image: String!
  command: String
  additionalVolumes: [EntryNormalCommandConfigurationAdditionalVolumes]
  environment: [EntryString]
  configFromRoles: [String]
}

type NormalCommandConfigurationAdditionalVolumes {
  host: String!
  container: String!
  mode: String
  type: String
}

type Project {
  config: ProjectConfiguration!
  path: String!
  isSetup: Boolean
  dbAvailable: Boolean
  dbList: [String]
  dbCurrent: String
}

type ProjectConfiguration {
  name: String!
  src: String!
  app: App!
}

type ProjectLoadError {
  name: ID!
  error: String!
  path: String!
}

type Query {
  project(name: String!): Project
  allProjectNames: [String]
  allProjects: MultiProjectsLoadResult
  config: SystemConfiguration
}

type ResultStep {
  steps: Int!
  currentStep: Int!
  text: String!
  isEnd: Boolean!
  isError: Boolean!
}

type Service {
  config: ServiceConfiguration!
  www: String
  running: Boolean!
  additionalPorts: [ServiceBoundAdditionalPort]!
  logFiles: [ServiceBoundLogFile]!
  containerName: String
}

type ServiceBoundAdditionalPort {
  key: String!
  title: String!
  container: Int!
  hostStart: Int!
  hostBound: Int
}

type ServiceBoundLogFile {
  type: String!
  key: String
  path: String!
}

type ServiceConfiguration {
  roles: [String]
  image: String!
  command: String
  port: Int
  logging: ServiceConfigurationLogging
  preStart: [String]
  postStart: [String]
  environment: [EntryString]
  config: [EntryServiceConfigurationConfig]
  runAsCurrentUser: Boolean
  workingDirectory: String
  additionalPorts: [EntryServiceConfigurationAdditionalPorts]
  additionalVolumes: [EntryServiceConfigurationAdditionalVolumes]
  allowFullMemlock: Boolean
  driver: ServiceConfigurationDriver
}

type ServiceConfigurationAdditionalPorts {
  title: String!
  container: Int!
  hostStart: Int!
}

type ServiceConfigurationAdditionalVolumes {
  host: String!
  container: String!
  mode: String
  type: String
}

type ServiceConfigurationConfig {
  from: String!
  to: String!
}

type ServiceConfigurationDriver {
  name: String!
  config: JSONString!
}

type ServiceConfigurationLogging {
  stdout: Boolean
  stderr: Boolean
  paths: [EntryString]
  commands: [EntryString]
}

type StartStopEndStep {
  errorString: String
  isFatalError: Boolean!
}

type StartStopProgressStep {
  service: String
  state: ResultStep
}

union StartStopResultStep = StartStopProgressStep | StartStopEndStep

type Subscription {
  updateRepositories: ResultStep
  updateImages(projectName: String!): ResultStep
  projectDbCopy(projectName: String!, source: String!, target: String!, switch: Boolean): ResultStep
  projectDbNew(projectName: String!, newName: String!, switch: Boolean): ResultStep
  projectDbSwitch(projectName: String!, name: String!): ResultStep
  projectDbDrop(projectName: String!, name: String!): ResultStep
  projectStart(projectName: String!, services: [String]): StartStopResultStep
  projectStop(projectName: String!, services: [String]): StartStopResultStep
}

type SystemConfiguration {
  proxy: SystemConfigurationProxy!
  updateHostsFile: Boolean!
  engine: String!
  repos: [String]!
}

type SystemConfigurationProxy {
  url: String!
  ports: SystemConfigurationProxyPorts!
  autostart: Boolean!
}

type SystemConfigurationProxyPorts {
  http: Int!
  https: GenericScalar!
}
